# AI建模引擎配置文件
# 形式化架构理论统一项目

# 理论源配置
theory_sources:
  - FormalUnified
  - Analysis
  - AI-Modeling-Engine

# 输出格式配置
output_formats:
  - python
  - rust
  - go
  - typescript
  - java
  - csharp

# 验证级别配置
verification_levels:
  - syntax      # 语法检查
  - semantics   # 语义验证
  - types       # 类型检查
  - architecture # 架构验证
  - performance # 性能分析

# AI增强功能
ai_enhancement:
  enabled: true
  model_type: "rule_based"  # rule_based, ml_based, hybrid
  learning_rate: 0.1
  max_iterations: 1000

# 自动验证配置
auto_verification:
  enabled: true
  strict_mode: false
  timeout: 30  # 秒

# 代码生成配置
code_generation:
  template_engine: "jinja2"
  code_style: "standard"
  add_comments: true
  add_tests: true
  add_documentation: true

# 架构模式配置
architecture_patterns:
  microservices:
    enabled: true
    default_language: "go"
    components:
      - "API网关"
      - "服务注册中心"
      - "配置中心"
      - "微服务实例"
  
  event_sourcing:
    enabled: true
    default_language: "rust"
    components:
      - "事件存储"
      - "事件总线"
      - "微服务"
      - "查询模型"
  
  layered:
    enabled: true
    default_language: "python"
    components:
      - "表示层"
      - "业务逻辑层"
      - "数据访问层"

# 输出目录配置
output:
  base_dir: "output"
  create_timestamp: true
  organize_by_language: true
  include_source: true

# 日志配置
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "ai_modeling_engine.log"
  console: true

# 性能配置
performance:
  max_memory: "2GB"
  max_cpu_cores: 4
  cache_size: 1000
  parallel_processing: true

# 验证规则配置
verification_rules:
  syntax:
    - "class_definition"
    - "method_signature"
    - "variable_declaration"
  
  semantics:
    - "component_implementation"
    - "constraint_validation"
    - "interface_compliance"
  
  architecture:
    - "pattern_compliance"
    - "dependency_management"
    - "separation_of_concerns"

# 模板配置
templates:
  python:
    base_class: "BaseComponent"
    interface_pattern: "ABC"
    error_handling: "exception_based"
  
  rust:
    base_trait: "Component"
    error_handling: "Result_based"
    memory_management: "ownership"
  
  go:
    base_interface: "Component"
    error_handling: "error_return"
    concurrency: "goroutines"

# 质量检查配置
quality_checks:
  code_complexity:
    max_cyclomatic: 10
    max_depth: 5
    max_lines: 100
  
  naming_conventions:
    follow_language_standards: true
    descriptive_names: true
    consistent_format: true
  
  documentation:
    min_coverage: 80
    require_examples: true
    require_api_docs: true 